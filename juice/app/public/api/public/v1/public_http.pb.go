// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.4
// source: public.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPublicGetUser = "/public.v1.Public/GetUser"
const OperationPublicVerifyUser = "/public.v1.Public/VerifyUser"

type PublicHTTPServer interface {
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	VerifyUser(context.Context, *VerifyUserRequest) (*VerifyResponse, error)
}

func RegisterPublicHTTPServer(s *http.Server, srv PublicHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/public/verify", _Public_VerifyUser0_HTTP_Handler(srv))
	r.POST("/v1/public/user", _Public_GetUser0_HTTP_Handler(srv))
}

func _Public_VerifyUser0_HTTP_Handler(srv PublicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPublicVerifyUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyUser(ctx, req.(*VerifyUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyResponse)
		return ctx.Result(200, reply)
	}
}

func _Public_GetUser0_HTTP_Handler(srv PublicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPublicGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserResponse)
		return ctx.Result(200, reply)
	}
}

type PublicHTTPClient interface {
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *UserResponse, err error)
	VerifyUser(ctx context.Context, req *VerifyUserRequest, opts ...http.CallOption) (rsp *VerifyResponse, err error)
}

type PublicHTTPClientImpl struct {
	cc *http.Client
}

func NewPublicHTTPClient(client *http.Client) PublicHTTPClient {
	return &PublicHTTPClientImpl{client}
}

func (c *PublicHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*UserResponse, error) {
	var out UserResponse
	pattern := "/v1/public/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPublicGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PublicHTTPClientImpl) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...http.CallOption) (*VerifyResponse, error) {
	var out VerifyResponse
	pattern := "/v1/public/verify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPublicVerifyUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
