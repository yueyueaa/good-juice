// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/
syntax = "proto3";
package user.v1;

// import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
// import "google/protobuf/empty.proto";
// import "google/protobuf/timestamp.proto";

option go_package = "juice/app/user/api/user/v1;v1";

// 通用基本结构

message IdentityMsg { // 用户身份信息
  uint64 user_id = 1;
  string token = 2;
  uint64 timestampe = 3;
}

message StatusMsg { // 返回消息
  uint64 code = 1;
  string msg = 2;
  uint64 timestampe = 3;
}

message Users { // 用户信息
  uint64 uid = 1;
  string user_name = 2;
  uint64 follow_count = 3;
  uint64 follower_count = 4;
  bool is_follow = 5; // False for oneself
  string user_intro = 6;
  bytes head_imageURL = 7;
}

// grpcurl -d {"name":"World"} localhost:9000 api.User/v1/user/login

service UserBasic { // 用户服务，用于所有用户

  // 用户登陆
  rpc UserLogin(UserLoginRequest) returns (UserLoginResponse) {
    option (google.api.http) = {
      post : "/v1/user_basic/login"
    };
  };

  // 用户注册
  rpc UserRegister(UserRegisterRequest) returns (UserRegisterResponse) {
    option (google.api.http) = {
      post : "/v1/user_basic/register"
    };
  };

  // 用户信息更新接口
  rpc UpdateUserInfo(UserUpdateInfoRequest) returns (UserUpdateInfoResponse) {
    option (google.api.http) = {
      post : "/v1/user_basic/update"
    };
  };

  // 获取用户信息
  rpc GetUserInfo(GetUserInfoRequest) returns (UserInfoResponse) {
    option (google.api.http) = {
      get : "/v1/user_basic/info"
    };
  };

  // 搜索用户
  rpc SearchUserList(SeaechUserListRequest) returns (UserListResponse) {
    option (google.api.http) = {
      get : "/v1/user_basic/search"
    };
  };
}

// 用户登录
message UserLoginRequest {
  IdentityMsg user_identity = 1; // NULL
  string user_name = 2;
  string password = 3;
}

message UserLoginResponse {
  StatusMsg status = 1;
  IdentityMsg IdentityMsg = 2;
}

// 用户注册
message UserRegisterRequest {
  IdentityMsg user_identity = 1; // NULL
  string user_name = 2;
  string password = 3;
}

message UserRegisterResponse {
  StatusMsg status = 1;
  IdentityMsg IdentityMsg = 2;
}

// 用户信息更新
message UserUpdateInfoRequest {
  IdentityMsg user_identity = 1;
  string user_intro = 2;
  bytes sex = 3;
  string area = 4;
  bytes head_imageURL = 5;
}

message UserUpdateInfoResponse { StatusMsg status = 1; }

// 用户信息
message GetUserInfoRequest { IdentityMsg user_identity = 1; }

message UserInfoResponse {
  StatusMsg status = 1;
  Users user = 2;
}

// 搜索用户
message SeaechUserListRequest {
  IdentityMsg user_identity = 1;
  string users_keywords = 2;
}

message UserListResponse {
  StatusMsg status = 1;
  repeated Users user_list = 2;
}

service UserRelation {
  // 关注（互动）
  rpc SetFollow(SetFollowRequest) returns (SetFollowResponse) {
    option (google.api.http) = {
      post : "/v1/user_relation/set"
    };
  };

  // 关注列表
  rpc GetFollowedList(GetFollowedListRequest) returns (FollowedListResponse) {
    option (google.api.http) = {
      get : "/v1/user_relation/followed"
    };
  };

  // 粉丝列表
  rpc GetFollowerList(GetFollowerListRequest) returns (FollowerListResponse) {
    option (google.api.http) = {
      get : "/v1/user_relation/follower"
    };
  };
}

// 关注操作
message SetFollowRequest {
  IdentityMsg user_identity = 1;
  uint64 followed_id = 2;
  string action_type = 3;
}

message SetFollowResponse { StatusMsg msg = 1; }

// 关注列表
message GetFollowedListRequest { IdentityMsg user_identity = 1; }

message FollowedListResponse {
  StatusMsg msg = 1;
  repeated Users user_list = 2;
}

// 粉丝列表
message GetFollowerListRequest { IdentityMsg user_identity = 1; }

message FollowerListResponse {
  StatusMsg msg = 1;
  repeated Users user_list = 2;
}
